<?xml version="1.0" encoding="UTF-8"?>
<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 2008-2009 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific 
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at legal/LICENSE.TXT.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
 
-->
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="GlassFish MBean Annotation Library (gmbal)" default="default" basedir="." xmlns:artifact="urn:maven-artifact-ant">
    <description>Builds, tests, and runs the gmbal project.</description>
    <import file="nbproject/build-impl.xml"/>

    <import file="nbproject/profiler-build-impl.xml"/>
    <import file="nbproject/management-build-impl.xml"/>    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="gmbal-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 
    -->
    <property file="build.properties"/>

    <property name="maven.ant.file"                 value="maven-ant-tasks-2.0.9.jar"/>
    <property name="maven.ant.dir"                  value="http://apache.hoxt.com/maven/binaries"/>
    <property name="groupId"                        value="org.glassfish.gmbal"/>
    <property name="version"                        value="${release.version}-${build.version}"/>
    <property name="repo.url"                       value="java-net:/maven2-repository/trunk/repository"/>
    <property name="file.url"                       value="file:/tmp/maven"/>
    <property environment="env"/>
    <property name="local.url"                      value="file://${env.HOME}/.m2"/>
    <property name="emma.dir"                       value="build/coverage"/>

    <target name="-post-clean">
        <delete dir="coverage"/>
        <delete file="coverage.ec"/>
    </target>

    <target name="gmbal-init">
        <echo message="Current version is ${version}"/>
    </target>

    <target name="all" depends="gmbal-init,clean,jar,emma-instr,test,test-report,emma-report"/>

    <target name="findbugs-html" depends="-post-jar">
        <property name="findbugs.home" value="lib/findbugs-1.3.3"/>
        <property name="findbugs.dir" value="dist/findbugs"/>
	<mkdir dir="${findbugs.dir}"/>
	<exec executable="${findbugs.home}/bin/findbugs">
	    <arg value="-textui"/>
	    <arg value="-html"/>
	    <arg value="-outputFile"/>
	    <arg file="${findbugs.dir}/gmbal-fb.html"/>
	    <arg value="-exclude"/>
	    <arg file="findbugs-filter.xml"/>
	    <arg value="-sourcepath"/>
	    <arg path="src:test"/>
	    <arg file="dist/gmbal.jar"/>
	    <arg file="build/test"/>
	</exec>
    </target>

    <target name="findbugs-xml" depends="-post-jar">
        <property name="findbugs.home" value="lib/findbugs-1.3.3"/>
        <property name="findbugs.dir" value="dist/findbugs"/>
	<mkdir dir="${findbugs.dir}"/>
	<exec executable="${findbugs.home}/bin/findbugs">
	    <arg value="-textui"/>
	    <arg value="-xml"/>
	    <arg value="-outputFile"/>
	    <arg file="${findbugs.dir}/gmbal-fb.xml"/>
	    <arg value="-exclude"/>
	    <arg file="findbugs-filter.xml"/>
	    <arg value="-sourcepath"/>
	    <arg path="src:test"/>
	    <arg file="dist/gmbal.jar"/>
	    <arg file="build/test"/>
	</exec>
    </target>

    <path id="emma.lib" >
        <pathelement location="lib/emma.jar"/>
        <pathelement location="lib/emma_ant.jar"/>
    </path>

    <target name="emma-init">
        <property name="emma-jar" value="lib/emma.jar"/>
        <property name="emma.classes.dir" value="${emma.dir}/classes"/>
        <property name="emma.metadata.file" value="${emma.dir}/coverage.em"/>
    </target>

    <target name="emma-instr" depends="emma-init,-post-jar">
        <mkdir dir="${emma.classes.dir}"/>
        <emma>
            <instr mode="copy" merge="true" outdir="${emma.classes.dir}" 
                outfile="${emma.metadata.file}">
                <instrpath>
                    <pathelement location="build/classes"/>
                </instrpath>
                <filter includes="org.glassfish.gmbal.*"/>
                <filter includes="org.glassfish.gmbal.util.*"/>
                <filter includes="org.glassfish.gmbal.impl.*"/>
                <filter includes="org.glassfish.gmbal.generic.*"/>
                <filter includes="org.glassfish.gmbal.typelib.*"/>
            </instr>
        </emma>
    </target>

    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />

    <target name="emma-report" depends="emma-init">
        <move file="coverage.ec" todir="${emma.dir}" verbose="true"/>
        <emma>
            <report sort="+block,+name,+method,+class"
                metrics="method:80,block:70,line:70,class:80">
                <sourcepath>
                    <pathelement location="src"/>
                </sourcepath>
                <fileset dir="${emma.dir}" >
                    <include name="*.ec" />
                    <include name="*.em" />
                </fileset>
                <html outfile="${emma.dir}/coverage.html" depth="method"
                    columns="name,class,method,block,line"/>
                <xml outfile="${emma.dir}/coverage.xml" depth="method"
                    columns="name,class,method,block,line"/>
            </report>
        </emma>
    </target>

    <macrodef name="make-bundle">
        <attribute name="file"/>
            <sequential>
                <mkdir dir="dist/bundles"/>
                <java jar="lib/bnd.jar" fork="true" failonerror="true">
                    <arg value="build"/>
                    <arg value="-classpath"/>
                    <arg value="dist/gmbal.jar"/>
                    <arg value="-output"/>
                    <arg value="dist/bundles/@{file}.jar"/>
                    <arg value="make/@{file}.bnd"/>
                </java>
            </sequential>
    </macrodef>

    <target name="make-source-bundle">
        <mkdir dir="dist/bundles"/> 
        <jar jarfile="dist/bundles/gmbal-source.jar" duplicate="fail">
            <fileset dir="src">
                <include name="org/glassfish/gmbal/*.java"/>
                <include name="org/glassfish/gmbal/**/*.java"/>
            </fileset>
        </jar>
        <jar jarfile="dist/bundles/gfprobe-provider-client-source.jar" duplicate="fail">
            <fileset dir="src">
                <include name="org/glassfish/probe/**/*.java"/>
            </fileset>
        </jar>
    </target>

    <target name="make-bnd-properties">
        <delete file="make/bnd.properties"/>
        <echo message="Bundle-Version: ${version}${line.separator}" file="make/bnd.properties"/>
    </target>

    <target name="make-bundles" depends="gmbal-init,make-source-bundle,make-bnd-properties">
        <make-bundle file="gmbal-api-only"/>
        <make-bundle file="gmbal"/>
        <make-bundle file="gfprobe-provider-client"/>
    </target>

<target name="bootstrap" 
	description="Fetch Maven library - needed only the first time.">
   <get
       src="${maven.ant.dir}/${maven.ant.file}"
       dest="lib/${maven.ant.file}"
       verbose="true"
       usetimestamp="true"/>
</target>

<target name="testAntJar"
    description="Check if the mavn-ant-tasks jar is already present in the lib dir.. .">
    <condition property="maven.lib.present">
       <available file="lib/${maven.ant.file}"/>
    </condition>
</target>

<target name="checkmaven" depends="testAntJar"  unless="maven.lib.present">
    <echo>
        Missing ${maven.ant.file} library. 
	It can be fetched from the Internet by giving 
	the command "ant bootstrap"
     </echo>
     <echo message="I'm getting it from internet for You!"/>
     <antcall target="bootstrap"/>
</target>

<target name="mavenize" depends="gmbal-init, checkmaven" description="initialize maven ">
    <path id="maven-ant-tasks.classpath" 
	  path="lib/${maven.ant.file}" />
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" 
        uri="urn:maven-artifact-ant" classpathref="maven-ant-tasks.classpath">
    </typedef>
    <artifact:install-provider artifactId="wagon-svn" groupId="org.jvnet.wagon-svn" version="1.7">
    <artifact:remoteRepository id="java.net.maven2.repository" url="http://download.java.net/maven/2/" />
    <artifact:localRepository path="/tmp/test"/>
    </artifact:install-provider>
</target>

<target name="test-loadfile">
    <loadfile property="dependency" srcFile="make/dependency.template.xml">
        <filterchain>
            <replacetokens>
                <token key="artifactId" value="codegen"/>
                <token key="version" value="${version}"/>
            </replacetokens>
        </filterchain>
    </loadfile>
    <echo message="${dependency}"/>
    <sequential>
        <property name="dependencies" value="orb,codegen,asm"/>
        <foreach list="${dependencies}" target="test-chain" name="foo"/>
    </sequential>
</target>

<!--
Variables in templates:
    groupId         always org.glassfish.gmbal
    jarName         the name of the jar file (<module>)
    version         the current gmbal version
    jarDescription  a brief description of the jar contents
    HEADER-@{module} the expanded version of make/header.xml inserted into the pom file
                    Note that all properties must have unique names.  Ant is COMPLETELY
                    braindead: see Greenberg's 10th law.

naming conventions:
The modules             (and their dependencies):
    gmbal-api            -
    gmbal-impl           gmbal-api

    for each module m:
        bnd file:           make/${m}.bnd
        pom template:       make/${m}.template.pom
        resulting jar:      dist/bundles/${m}.jar
-->
<macrodef name="make-file">
    <attribute name="module"/>
    <attribute name="description"/>
    <sequential>
        <loadfile property="HEADER-@{module}" srcFile="make/header.xml">
            <filterchain>
                <replacetokens>
                    <token key="artifactId" value="@{module}"/>
                    <token key="version" value="${version}"/>
                    <token key="jarDescription" value="@{description}"/>
                    <token key="groupId" value="${groupId}"/>
                    <token key="repositoryUrl" value="${repo.url}"/>
                </replacetokens>
            </filterchain>
        </loadfile>
        <copy file="make/@{module}.template.xml" tofile="make/gmbal.temp.pom" overwrite="true">
            <filterset>
              <filter token="HEADER" value="${HEADER-@{module}}"/>
              <filter token="version" value="${version}"/>
              <filter token="groupId" value="${groupId}"/>
            </filterset>
        </copy>
    </sequential>
</macrodef>

<macrodef name="push-to-maven">
    <attribute name="module"/>
    <attribute name="description"/>
    <attribute name="repo"/>
    <sequential>
        <make-file module="@{module}" description="@{description}"/>

        <artifact:pom id="gmbal.project" file="make/gmbal.temp.pom" />
        <artifact:deploy file="dist/bundles/@{module}.jar">
            <remoteRepository url="@{repo}">
            </remoteRepository>
            <pom refid="gmbal.project"/>
        </artifact:deploy>
        <delete file="make/gmbal.temp.pom" verbose="true"/>
    </sequential>
</macrodef>

<target name="release" depends="gmbal-init,mavenize">
    <push-to-maven module="gmbal-api-only" description="gmbal API" repo="${repo.url}"/>
    <push-to-maven module="gmbal" description="gmbal implementation" repo="${repo.url}"/>
    <push-to-maven module="gmbal-source" description="gmbal source code" repo="${repo.url}"/>
</target>

<target name="release-local" depends="gmbal-init,mavenize">
    <push-to-maven module="gmbal-api-only" description="gmbal API" repo="${local.url}"/>
    <push-to-maven module="gmbal" description="gmbal implementation" repo="${local.url}"/>
    <push-to-maven module="gmbal-source" description="gmbal source code" repo="${local.url}"/>
</target>

<macrodef name="push-probe-to-maven">
    <attribute name="repo"/>
    <sequential>
        <artifact:pom id="gfprobe.source.project" file="make/gfprobe-provider-client-source.pom.xml"/>
        <artifact:deploy file="dist/bundles/gfprobe-provider-client-source.jar">
            <remoteRepository url="@{repo}">
            </remoteRepository>
            <pom refId="gfprobe.source.project"/>
        </artifact:deploy>
        <artifact:pom id="gfprobe.project" file="make/gfprobe-provider-client.pom.xml"/>
        <artifact:deploy file="dist/bundles/gfprobe-provider-client.jar">
            <remoteRepository url="@{repo}">
            </remoteRepository>
            <pom refId="gfprobe.project"/>
        </artifact:deploy>
    </sequential>
</macrodef>

<target name="release-probe" depends="mavenize">
    <push-probe-to-maven repo="${repo.url}"/>
</target>

<target name="release-probe-local" depends="mavenize">
    <push-probe-to-maven repo="${local.url}"/>
</target>

<target name="hudson-job" depends="clean,jar,emma-instr,test,javadoc,test-report,findbugs-xml,emma-report,make-bundles"/>

</project>
