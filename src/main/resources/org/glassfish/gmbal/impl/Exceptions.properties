#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common Development
# and Distribution License("CDDL") (collectively, the "License").  You
# may not use this file except in compliance with the License.  You can
# obtain a copy of the License at
# https://oss.oracle.com/licenses/CDDL+GPL-1.1
# or LICENSE.txt.  See the License for the specific
# language governing permissions and limitations under the License.
#
# When distributing the software, include this License Header Notice in each
# file and include the License file at LICENSE.txt.
#
# GPL Classpath Exception:
# Oracle designates this particular file as subject to the "Classpath"
# exception as provided by Oracle in the GPL Version 2 section of the License
# file that accompanied this code.
#
# Modifications:
# If applicable, add the following below the License Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyright [year] [name of copyright owner]"
#
# Contributor(s):
# If you wish your version of this file to be governed by only the CDDL or
# only the GPL Version 2, indicate your decision by adding "[Contributor]
# elects to include this software in this distribution under the [CDDL or GPL
# Version 2] license."  If you don't indicate a single choice of license, a
# recipient has the option to distribute your version of this file under
# either the CDDL, the GPL Version 2 or to extend the choice of license to
# its licensees as provided above.  However, if you add GPL Version 2 code
# and therefore, elected the GPL Version 2 license, then the option applies
# only if the new code is made subject to such option by the copyright
# holder.
#

### Resource file generated on Fri Jul 22 11:45:24 PDT 2011
#
# Resources for class org.glassfish.gmbal.impl.Exceptions
#
.annotationMethodException="GMBAL: Exception on invoking annotation method {0}"
.annotationsNotSupported="GMBAL: Cannot call getAnnotations on {0}"
.attributeGettingError="GMBAL: Error in getting attribute {0}"
.attributeSettingError="GMBAL: Error in setting attribute {0}"
.badFieldFormat="GMBAL: Missing = character: {0}"
.badFieldName="GMBAL: Empty or null field name"
.badInheritedAttributeAnnotation="GMBAL: Class {0} contains both the InheritedAttribute and the InheritedAttributes annotations"
.cannotAddNullAnnotation="GMBAL: Cannot add null annotation to {0}"
.cannotConvertToJavaType="GMBAL: {0} cannot be converted into a Java class"
.childMustBeSingleton="GMBAL: Parent object {0} cannot contain more than one object of type {1}: cannot add child {2}"
.couldNotFindAttribute="GMBAL: Could not find attribute {0}"
.couldNotFindOperation="GMBAL: Could not find operation named {0}"
.couldNotFindOperationAndSignature="GMBAL: Could not find operation named {0} with signature {1}"
.couldNotFindWritableAttribute="GMBAL: Could not find writable attribute {0}"
.createRootCalled="GMBAL: Method {0} cannot be called after a successful createRoot call"
.createRootNotCalled="GMBAL: Method {0} cannot be called before a successful createRoot call"
.deferredRegistrationException="GMBAL: JMX exception on registration of MBean {0}"
.differentSizeArrays="GMBAL: Different size arrays"
.duplicateAMXFieldName="GMBAL: Attribute id {0} in method {1} in class {2} is illegal becase it is a reserved Attribute id for AMX"
.duplicateAnnotation="GMBAL: Cannot add annotation to element {0}: an Annotation of type {1} is already present"
.duplicateFieldName="GMBAL: Duplicate field name: {0}"
.duplicateObjectNameKeyAttributes="GMBAL: Methods {0} and {1} are both annotated with @ObjectNameKey in class {2}"
.entityNotObjectName="GMBAL: Management entity {0} is not an ObjectName"
.errorInConstructingMBean="GMBAL: Could not construct MBean {0}"
.errorInConstructingOpenData="GMBAL: Could not set field {1} in CompositeData for type {0}"
.excForAddAnnotationFieldsToMap="GMBAL: Exception in addAnnotationFieldsToMap"
.excForAddDescriptorFieldsToMap="GMBAL: @DescriptorFields must contain '=' : {0}"
.excForAddToMap="GMBAL: Inconcistent values for descriptor field {0} from annotations: {1} :: {2}"
.excForAnnotationToField="GMBAL: Illegal type for annotation element using @DescriptorKey: {0}"
.excForCheckType="GMBAL: Required type is {0}"
.excForGetMeta="GMBAL: Exception in getMeta"
.excForMakeFromAnnotated="GMBAL: {0} is not a valid attribute method"
.excForMakeFromInherited="GMBAL: methodName and id must not both be null"
.excForReadResolveImmutableDescriptor="GMBAL: Bad names or values"
.excForUnion="GMBAL: Inconsistent values for descriptor field {0}: {1} :: {2}"
.excInMakeMapTabularDataToManagedEntity="GMBAL: Exception in makeMapTabularData:toManagedEntity"
.excInOpenParameterInfo="GMBAL: OpenDataException trying to create OpenMBEanParameterInfoSupport for parameter {0} on method {1}"
.exceptionInHandleManagedData="GMBAL: Exception in handleManagedData"
.exceptionInMakeCompositeType="GMBAL: Exception in makeCompositeType"
.exceptionInMakeMapTabularType="GMBAL: Exception in makeMapTabularType"
.exceptionInRegister="GMBAL: Exception in register"
.exceptionInUnregister="GMBAL: Exception in unregister"
.illegalAttributeField="GMBAL: Field {0} must be final and have an immutable type to be used as an attribute"
.invalidRootParentName="GMBAL: rootParentName {0} is invalid: missing type or name"
.invalidSubtypeOfParent="GMBAL: Parent object {0} only allows subtypes {1}:  cannot add child {2} of type {3}"
.iteratorNotFound="GMBAL: iterator() method not found in subclass of Iterable {0}"
.keyFieldDescription="GMBAL: Key of map {0}"
.malformedObjectName="GMBAL: A MalformedObjectNameException occured on {0}"
.managedObjectAnnotationNotFound="GMBAL: ManagedObject annotation not found on class {0}"
.nameOfManagedObject="GMBAL: Name of this ManagedObject"
.nextNotFound="GMBAL: next() method not found in type {0}"
.noAnnotationFound="GMBAL: No {0} annotation found on {1}"
.noArrayOfArray="GMBAL: Arrays of arrays not supported"
.noDescriptionAvailable="GMBAL: No description available!"
.noRootObjectName="GMBAL: Could not construct ObjectName for root"
.noStringConstructor="GMBAL: There is no <init>(String) constructor available to convert a String into a {0}"
.noStringConstructorAvailable="GMBAL: No <init>(String) constructor available for class {0}"
.nodeAlreadyHasParent="GMBAL: Cannot set parent to {0}: this node already has a parent"
.nonSingletonRequiresName="GMBAL: Attempt made to register non-singleton object of type {1} without a name as a child of {0}"
.notAString="GMBAL: {0} is not a String"
.notBothNull="GMBAL: At least one of getter and setter must not be null"
.notPartOfThisTree="GMBAL: Entity {0} is not part of this EntityTree"
.nullArgument="GMBAL: Null argument"
.nullArrayParameter="GMBAL: Null array parameter"
.nullFieldsParameter="GMBAL: Null fields parameter"
.nullMap="GMBAL: Null Map"
.objStringWrongRegisterCall="GMBAL: obj argument is a String: {0} : was a call to registerAtRoot intended here?"
.objectAlreadyRegistered="GMBAL: Object {0} is already registered as {1}"
.objectNotFound="GMBAL: Object {0} not found"
.openToJavaNotSupported="GMBAL: Converting from OpenType {0} to Java type {1} is not supported"
.openTypeInArrayTypeException="GMBAL: OpenType exception in ArrayType construction caused by {0}"
.paramTypeNeedsArgument="GMBAL: {0} must have at least 1 type argument"
.parameterNamesLengthBad="GMBAL: ParameterNams annotation must have the same number of arguments as the length of the method parameter list"
.parentCannotBeNull="GMBAL: Parent cannot be null"
.parentNotFound="GMBAL: Parent object {0} not found"
.ppNullInRootParent="GMBAL: The ObjectName of the root parent MUST contain pp key"
.recursiveTypesNotSupported="GMBAL: Recursive types are not supported: type is {0}"
.registerMBeanRegistered="GMBAL: tried to register MBean {0} that is already registered"
.registeringMBean="GMBAL: registering MBean {0}"
.removeNotSupported="GMBAL: Remove is not supported"
.rootAlreadySet="GMBAL: Root has already been set: cannot set it again"
.rootNotSet="GMBAL: Root has not been set"
.rootRegisterFail="GMBAL: Could not register root with ObjectName {0}"
.rowTypeDescription="GMBAL: row type for {0}"
.shouldNotHappen="GMBAL: Should not happen"
.singletonCannotSpecifyName="GMBAL: Attempt made to register singleton object of type {1} with name {2} as a child of {0}"
.stringConversionError="GMBAL: Error in converting from String to {0}"
.tableDescription="GMBAL: Table for map {0}"
.tableName="GMBAL: Table:{0}"
.typeNullInRootParent="GMBAL: The ObjectName of the root parent MUST contain pp key"
.typesMustMatch="GMBAL: Getter and setter type must match"
.unexpectedException="GMBAL: Got an unexpected exception from method {0}"
.unknownDeclarationType="GMBAL: Unknown EvaluatedDeclaration type {0}"
.unregisterMBeanNotRegistered="GMBAL: tried to unregister MBean {0} that is not registered"
.unregisteringMBean="GMBAL: unregistering MBean {0}"
.unsupportedOpenType="GMBAL: Unsupported OpenType {0}"
.unsupportedOperation="GMBAL: Descriptor is read-only"
.valueFieldDescription="GMBAL: Value of map {0}"
